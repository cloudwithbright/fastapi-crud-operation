<template>
    <div class="container">
        <h1>Item Manager</h1>
        <form @submit.prevent="createNewItem" class="form">
            <label>
                Name
                <input class="input-field" v-model="item.name" placeholder="Name" required />
            </label>
            <label>
                Description
                <input class="input-field" v-model="item.description" placeholder="Description" required />
            </label>
            <label>
                Price
                <input type="number" class="input-field" v-model.number="item.price" placeholder="Price" required />
            </label>
            <label class="checkbox-label">
                <input type="checkbox" v-model="item.in_stock" /> In Stock
            </label>
            <button type="submit" class="submit-button">Create Item</button>
        </form>

        <h2>Items</h2>
        <table class="item-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Price</th>
                    <th>In Stock</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="item in items" :key="item.id">
                    <td>{{ item.name }}</td>
                    <td>{{ item.description }}</td>
                    <td>{{ item.price }}</td>
                    <td>{{ item.in_stock ? 'Yes' : 'No' }}</td>
                    <td>
                        <button @click="editItem(item)" class="action-button">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button @click="deleteExistingItem(item.id)" class="action-button">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>

        <h2>Upload File</h2>
        <input type="file" @change="handleFileUpload" class="file-input" />
    </div>
</template>

<script>
import { ref, onMounted } from 'vue';
import { getItems, createItem, deleteItem, uploadFile } from '../api';
import { useToast } from 'vue-toastification';

export default {
    setup() {
        const items = ref([]);
        const item = ref({
            name: '',
            description: '',
            price: 0,
            in_stock: false,
        });

        const toast = useToast();

        const fetchItems = async () => {
            const response = await getItems();
            items.value = response.data;
        };

        const createNewItem = async () => {
            const response = await createItem(item.value);
            if (response.message === "Item added successfully. Thank you!") {
                items.value.push(response.data[0]);
                toast.success(response.message);
            } else if (response.message === "Item exists. Thank you!") {
                toast.info(response.message);
            }
            item.value = { name: '', description: '', price: 0, in_stock: false };
        };

        const editItem = (editableItem) => {
            item.value = { ...editableItem };
        };

        const deleteExistingItem = async (id) => {
            await deleteItem(id);
            items.value = items.value.filter(item => item.id !== id);
            toast.success('Item deleted successfully!');
        };

        const handleFileUpload = async (event) => {
            const file = event.target.files[0];
            if (file) {
                await uploadFile(file);
                toast.success('File uploaded successfully!');
            }
        };

        onMounted(fetchItems);

        return { items, item, createNewItem, editItem, deleteExistingItem, handleFileUpload };
    },
};
</script>

<style>
body {
    background-color: #f0f4f8;
    font-family: Arial, sans-serif;
}

.container {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px;
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    max-width: 600px;
    margin: auto;
}

h1 {
    color: #333;
}

h2 {
    color: #555;
    margin-top: 20px;
}

.form {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    margin-bottom: 20px;
}

.input-field {
    padding: 12px;
    font-size: 16px;
    width: 100%;
    border: 1px solid #ccc;
    border-radius: 4px;
    margin-bottom: 15px;
    transition: border-color 0.3s;
}

.input-field:focus {
    border-color: #007bff;
    outline: none;
}

.checkbox-label {
    margin-bottom: 15px;
    color: #333;
}

.submit-button {
    padding: 10px 20px;
    font-size: 16px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.submit-button:hover {
    background-color: #0056b3;
}

.item-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

.item-table th,
.item-table td {
    padding: 12px;
    text-align: left;
    border: 1px solid #ddd;
}

.item-table th {
    background-color: #007bff;
    color: white;
}

.item-table tr:nth-child(even) {
    background-color: #f2f2f2;
}

.item-table tr:hover {
    background-color: #e0e0e0;
}

.action-button {
    padding: 5px;
    font-size: 16px;
    cursor: pointer;
    background: none;
    border: none;
    color: #007bff;
    transition: color 0.3s;
}

.action-button:hover {
    color: #0056b3;
}

.file-input {
    margin-top: 10px;
}
</style>